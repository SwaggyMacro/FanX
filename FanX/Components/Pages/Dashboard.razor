@page "/"
@page "/dashboard"
@using FanX.Resources
@using System.Linq
@using ApexCharts
@attribute [Authorize]
@implements IDisposable
@inject LocalizationService LocalizationService
@inject IServiceScopeFactory ScopeFactory
@inject ThemeService ThemeService

<PageTitle>@Localization.Dashboard</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">@Localization.Dashboard</MudText>

<!-- Live Status Section -->
<MudGrid Spacing="3" Class="mb-4">
    <MudItem xs="12">
        <MudText Typo="Typo.h6">Live Status</MudText>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudStack Spacing="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Localization.Power</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (_livePowerData != null)
                {
                    <MudPaper Class="pa-3">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Power" Color="MudBlazor.Color.Error"/>
                                <MudText Typo="Typo.body1">@_livePowerData.SensorName</MudText>
                            </MudStack>
                            <MudText Typo="Typo.h5">@_livePowerData.Reading.ToString("F1") W</MudText>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2" Wrap="Wrap.Wrap">
                            <MudText Typo="Typo.caption">Avg (1h): @_powerAverages.Hour.ToString("F1") W</MudText>
                            <MudText Typo="Typo.caption">Avg (24h): @_powerAverages.Day.ToString("F1") W</MudText>
                            <MudText Typo="Typo.caption">Avg (7d): @_powerAverages.Week.ToString("F1") W</MudText>
                            <MudText Typo="Typo.caption">Avg (30d): @_powerAverages.Month.ToString("F1") W</MudText>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-1" Wrap="Wrap.Wrap">
                            <MudText Typo="Typo.caption">Min: @_powerAverages.Min.ToString("F1") W</MudText>
                            <MudText Typo="Typo.caption">Max: @_powerAverages.Max.ToString("F1") W</MudText>
                        </MudStack>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localization.Temperature</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="2">
                        @foreach (var sensor in _liveCpuData)
                        {
                            <MudPaper Class="pa-3">
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Thermostat" Color="MudBlazor.Color.Warning"/>
                                        <MudText Typo="Typo.body1">@sensor.SensorName</MudText>
                                    </MudStack>
                                    <MudText Typo="Typo.h5">@sensor.Reading.ToString("F1") °C</MudText>
                                </MudStack>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2" Wrap="Wrap.Wrap">
                                    <MudText Typo="Typo.caption">Avg (1h): @_tempAverages[sensor.SensorName ?? "Null"].Hour.ToString("F1") °C</MudText>
                                    <MudText Typo="Typo.caption">Avg (24h): @_tempAverages[sensor.SensorName ?? "Null"].Day.ToString("F1") °C</MudText>
                                    <MudText Typo="Typo.caption">Avg (7d): @_tempAverages[sensor.SensorName ?? "Null"].Week.ToString("F1") °C</MudText>
                                    <MudText Typo="Typo.caption">Avg (30d): @_tempAverages[sensor.SensorName ?? "Null"].Month.ToString("F1") °C</MudText>
                                </MudStack>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-1" Wrap="Wrap.Wrap">
                                    <MudText Typo="Typo.caption">Min: @_tempAverages[sensor.SensorName ?? "Null"].Min.ToString("F1") °C</MudText>
                                    <MudText Typo="Typo.caption">Max: @_tempAverages[sensor.SensorName ?? "Null"].Max.ToString("F1") °C</MudText>
                                </MudStack>
                            </MudPaper>
                        }
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudStack>
                </MudItem>

    <MudItem xs="12" md="6">
        <MudCard Style="height: 100%">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Localization.Fans</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="2">
            @foreach (var sensor in _liveFanData)
            {
                        <MudPaper Class="pa-3">
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Air" Color="MudBlazor.Color.Info"/>
                                    <MudText Typo="Typo.body1">@sensor.SensorName</MudText>
                                </MudStack>
                        <MudText Typo="Typo.h5">@sensor.Reading.ToString("F0") RPM</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2" Wrap="Wrap.Wrap">
                                <MudText Typo="Typo.caption">Avg (1h): @_fanAverages[sensor.SensorName ?? "Null"].Hour.ToString("F0") RPM</MudText>
                                <MudText Typo="Typo.caption">Avg (24h): @_fanAverages[sensor.SensorName ?? "Null"].Day.ToString("F0") RPM</MudText>
                                <MudText Typo="Typo.caption">Avg (7d): @_fanAverages[sensor.SensorName ?? "Null"].Week.ToString("F0") RPM</MudText>
                                <MudText Typo="Typo.caption">Avg (30d): @_fanAverages[sensor.SensorName ?? "Null"].Month.ToString("F0") RPM</MudText>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-1" Wrap="Wrap.Wrap">
                                <MudText Typo="Typo.caption">Min: @_fanAverages[sensor.SensorName ?? "Null"].Min.ToString("F0") RPM</MudText>
                                <MudText Typo="Typo.caption">Max: @_fanAverages[sensor.SensorName ?? "Null"].Max.ToString("F0") RPM</MudText>
                            </MudStack>
                        @if (sensor.Pwm.HasValue)
                        {
                            <MudProgressLinear Color="MudBlazor.Color.Primary" Value="@sensor.Pwm.Value" Class="my-1"/>
                                <MudText Typo="Typo.body2" Align="MudBlazor.Align.End">@sensor.Pwm.Value.ToString("F0")%</MudText>
                        }
                    </MudPaper>
            }
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
    
<!-- Charts Section -->
<MudGrid Spacing="3" Class="mb-4">
    <MudItem xs="12">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Historical Data</MudText>
            <MudSelect T="int" Value="_selectedTimeRange" ValueChanged="OnTimeRangeChanged" 
                      Label="Chart Time Range" Variant="Variant.Outlined" Margin="Margin.Dense">
                <MudSelectItem Value="1">@string.Format(Localization.LastHours, 1)</MudSelectItem>
                <MudSelectItem Value="6">@string.Format(Localization.LastHours, 6)</MudSelectItem>
                <MudSelectItem Value="24">@string.Format(Localization.LastHours, 24)</MudSelectItem>
                <MudSelectItem Value="168">@string.Format(Localization.LastDays, 7)</MudSelectItem>
                <MudSelectItem Value="720">@string.Format(Localization.LastDays, 30)</MudSelectItem>
            </MudSelect>
        </MudStack>
    </MudItem>
</MudGrid>

<MudGrid Spacing="3">
    <MudItem xs="12" md="4">
        <MudStack Spacing="3">
            <MudPaper Class="pa-3">
            <MudText Typo="Typo.h6">@Localization.TemperatureHistory</MudText>
            <ApexChart TItem="SensorData" Options="_temperatureChartOptions" @ref="_temperatureChart">
                @foreach (var series in _chartData.Where(d => d.SensorType == "Temperature").GroupBy(d => d.SensorName))
                {
                    <ApexPointSeries TItem="SensorData" Items="series.ToList()" Name="@series.Key"
                                     XValue="@(item => item.Timestamp)"
                                     YValue="@(item => Convert.ToDecimal(item.Reading))"/>
                }
            </ApexChart>
        </MudPaper>
            <MudPaper Class="pa-3">
                <MudText Typo="Typo.h6">@Localization.PowerHistory</MudText>
                <ApexChart TItem="SensorData" Options="_powerChartOptions" @ref="_powerChart">
                    <ApexPointSeries TItem="SensorData"
                                     Items="@(_chartData.Where(d => d.SensorName == "Pwr Consumption").ToList())"
                                     Name="Power Consumption"
                                     XValue="@(item => item.Timestamp)"
                                     YValue="@(item => Convert.ToDecimal(item.Reading))"/>
                </ApexChart>
            </MudPaper>
        </MudStack>
    </MudItem>

    <MudItem xs="12" md="8">
        <MudPaper Class="pa-3 d-flex flex-column" Style="height: 100%">
            <MudText Typo="Typo.h6" GutterBottom="true">@Localization.FanSpeedHistory</MudText>
            <ApexChart TItem="SensorData" Options="_fanChartOptions" @ref="_fanChart">
                @foreach (var series in _chartData.Where(d => d.SensorType == "Fan" && d.SensorName != "Fan Redundancy").GroupBy(d => d.SensorName))
                {
                    <ApexPointSeries TItem="SensorData" Items="series.ToList()" Name="@series.Key"
                                     XValue="@(item => item.Timestamp)"
                                     YValue="@(item => Convert.ToDecimal(item.Reading))"/>
                }
            </ApexChart>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private Timer? _timer;
    private ApexChartOptions<SensorData> _temperatureChartOptions = new();
    private ApexChartOptions<SensorData> _fanChartOptions = new();
    private ApexChartOptions<SensorData> _powerChartOptions = new();
    private ApexChart<SensorData>? _temperatureChart;
    private ApexChart<SensorData>? _fanChart;
    private ApexChart<SensorData>? _powerChart;

    private List<SensorData> _chartData = new();
    private List<SensorData> _liveCpuData = new();
    private List<SensorData> _liveFanData = new();
    private SensorData? _livePowerData;
    
    private readonly Dictionary<string, (double Hour, double Day, double Week, double Month, double Min, double Max)> _tempAverages = new();
    private (double Hour, double Day, double Week, double Month, double Min, double Max) _powerAverages;
    private readonly Dictionary<string, (double Hour, double Day, double Week, double Month, double Min, double Max)> _fanAverages = new();

    // Performance optimization variables
    private int _selectedTimeRange = 24; // Hours
    private DateTime _lastDataUpdate = DateTime.MinValue;
    private readonly Dictionary<int, List<SensorData>> _chartDataCache = new();
    private const int MaxDataPoints = 500; // Limit chart data points for performance

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
        LocalizationService.OnLanguageChanged += StateHasChanged;
        InitializeChartOptions();
        await LoadData();
        _timer = new Timer(async void (_) => await InvokeAsync(LoadLiveData), null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async void OnThemeChanged()
    {
        InitializeChartOptions();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnTimeRangeChanged(int newRange)
    {
        _selectedTimeRange = newRange;
        await LoadChartData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadData()
    {
        await LoadLiveData();
        await LoadChartData();
    }

    private async Task LoadLiveData()
    {
        await using var scope = ScopeFactory.CreateAsyncScope();
        var db = scope.ServiceProvider.GetRequiredService<DatabaseService>().Db;

        var now = DateTime.Now;
        var hourAgo = now.AddHours(-1);

        // Only load recent data for live status (much faster)
        var recentData = await db.Queryable<SensorData>()
            .Where(s => s.Timestamp >= hourAgo)
            .OrderByDescending(s => s.Timestamp)
            .ToListAsync();

        if (!recentData.Any())
        {
            _liveCpuData.Clear();
            _liveFanData.Clear();
            _livePowerData = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

        // Get latest data for live display
        _liveCpuData = recentData.Where(d => d.SensorType == "Temperature")
            .GroupBy(d => d.SensorName)
            .Select(g => g.First())
            .ToList();

        _liveFanData = recentData.Where(d => d.SensorType == "Fan" && d.SensorName != "Fan Redundancy")
            .GroupBy(d => d.SensorName)
            .Select(g => g.First())
            .ToList();

        _livePowerData = recentData.FirstOrDefault(d => d.SensorName == "Pwr Consumption");

        // Load statistical data only when needed (less frequent updates)
        if (DateTime.Now - _lastDataUpdate > TimeSpan.FromMinutes(1))
        {
            await LoadStatistics();
            _lastDataUpdate = DateTime.Now;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadStatistics()
    {
        await using var scope = ScopeFactory.CreateAsyncScope();
        var db = scope.ServiceProvider.GetRequiredService<DatabaseService>().Db;

        var now = DateTime.Now;
        var hourAgo = now.AddHours(-1);
        var dayAgo = now.AddDays(-1);
        var weekAgo = now.AddDays(-7);
        var monthAgo = now.AddDays(-30);

        // Load statistics data with optimized queries
        var allDbData = await db.Queryable<SensorData>()
            .Where(s => s.Timestamp >= monthAgo)
            .OrderBy(s => s.Timestamp)
            .ToListAsync();
        
        // Calculate averages
        var tempSensors = allDbData.Where(d => d.SensorType == "Temperature").GroupBy(d => d.SensorName);
        foreach (var group in tempSensors)
        {
            if (group.Key != null)
            _tempAverages[group.Key] = (
                group.Where(d => d.Timestamp >= hourAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.Where(d => d.Timestamp >= dayAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.Where(d => d.Timestamp >= weekAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Min(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Max(d => d?.Reading ?? 0)
            );
        }

        var powerData = allDbData.Where(d => d.SensorName == "Pwr Consumption").ToList();
        if (powerData.Any())
        {
            _powerAverages = (
                powerData.Where(d => d.Timestamp >= hourAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                powerData.Where(d => d.Timestamp >= dayAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                powerData.Where(d => d.Timestamp >= weekAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                powerData.DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                powerData.DefaultIfEmpty().Min(d => d?.Reading ?? 0),
                powerData.DefaultIfEmpty().Max(d => d?.Reading ?? 0)
            );
        }
        
        var fanSensors = allDbData.Where(d => d.SensorType == "Fan").GroupBy(d => d.SensorName);
        foreach (var group in fanSensors)
        {
            if (group.Key != null)
            _fanAverages[group.Key] = (
                group.Where(d => d.Timestamp >= hourAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.Where(d => d.Timestamp >= dayAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.Where(d => d.Timestamp >= weekAgo).DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Average(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Min(d => d?.Reading ?? 0),
                group.DefaultIfEmpty().Max(d => d?.Reading ?? 0)
            );
        }
    }

    private async Task LoadChartData()
    {
        // Check cache first
        if (_chartDataCache.ContainsKey(_selectedTimeRange))
        {
            _chartData = _chartDataCache[_selectedTimeRange];
            await UpdateCharts();
            return;
        }

        await using var scope = ScopeFactory.CreateAsyncScope();
        var db = scope.ServiceProvider.GetRequiredService<DatabaseService>().Db;

        var now = DateTime.Now;
        var startTime = now.AddHours(-_selectedTimeRange);

        // Load chart data with sampling for performance
        var chartDataQuery = db.Queryable<SensorData>()
            .Where(s => s.Timestamp >= startTime)
            .OrderBy(s => s.Timestamp);

        var rawData = await chartDataQuery.ToListAsync();

        // Normalize timestamps and sample data properly
        _chartData = NormalizeAndSampleData(rawData, MaxDataPoints);

        // Cache the result
        _chartDataCache[_selectedTimeRange] = _chartData;

        await UpdateCharts();
    }

    private List<SensorData> NormalizeAndSampleData(List<SensorData> data, int maxPoints)
    {
        if (data.Count <= maxPoints)
        {
            // Still normalize timestamps even for small datasets
            return NormalizeTimestamps(data);
        }

        // Group by timestamp to get all sensors at each time point
        var timeGroups = data.GroupBy(d => d.Timestamp).OrderBy(g => g.Key).ToList();
        
        if (timeGroups.Count <= maxPoints)
        {
            // Flatten and normalize
            return NormalizeTimestamps(timeGroups.SelectMany(g => g).ToList());
        }

        // Sample time points, not individual records
        var step = timeGroups.Count / maxPoints;
        var sampledGroups = new List<IGrouping<DateTime, SensorData>>();

        for (int i = 0; i < timeGroups.Count; i += step)
        {
            sampledGroups.Add(timeGroups[i]);
        }

        // Always include the last time group
        if (sampledGroups.LastOrDefault()?.Key != timeGroups.LastOrDefault()?.Key)
        {
            sampledGroups.Add(timeGroups.Last());
        }

        // Flatten the sampled groups and normalize timestamps
        var sampledData = sampledGroups.SelectMany(g => g).ToList();
        return NormalizeTimestamps(sampledData);
    }

    private List<SensorData> NormalizeTimestamps(List<SensorData> data)
    {
        // Group by timestamp and normalize to ensure all sensors have the same timestamp
        var normalizedData = data
            .GroupBy(d => d.Timestamp)
            .SelectMany(g =>
            {
                var unifiedTimestamp = g.Key;
                return g.Select(d =>
                {
                    // Create a new object to avoid modifying the original
                    return new SensorData
                    {
                        Id = d.Id,
                        SensorName = d.SensorName,
                        SensorType = d.SensorType,
                        Reading = d.Reading,
                        Pwm = d.Pwm,
                        Timestamp = unifiedTimestamp
                    };
                });
            })
            .OrderBy(d => d.Timestamp)
            .ToList();

        return normalizedData;
    }

    private async Task UpdateCharts()
    {
        if (_temperatureChart != null) await _temperatureChart.UpdateSeriesAsync();
        if (_fanChart != null) await _fanChart.UpdateSeriesAsync();
        if (_powerChart != null) await _powerChart.UpdateSeriesAsync();
    }

    private void InitializeChartOptions()
    {
        var theme = ThemeService.IsDarkMode ? Mode.Dark : Mode.Light;

        _temperatureChartOptions = new ApexChartOptions<SensorData>
        {
            Theme = new Theme { Mode = theme },
            Chart = new Chart { 
                Zoom = new Zoom { Enabled = true }, 
                Type = ApexCharts.ChartType.Line,
                Animations = new Animations { Enabled = false } // Disable animations for better performance
            },
            Xaxis = new XAxis { 
                Type = XAxisType.Datetime,
                Position = XAxisPosition.Bottom,
                Labels = new XAxisLabels { 
                    RotateAlways = false,
                    Rotate = -45,
                    Style = new AxisLabelStyle { FontSize = "12px" },
                    OffsetY = 0 // Ensure labels are below the axis
                },
                AxisBorder = new AxisBorder { Show = true },
                AxisTicks = new AxisTicks { Show = true }
            },
            Yaxis = [new YAxis { Title = new AxisTitle { Text = "°C" } }],
            Tooltip = new Tooltip { 
                Shared = true, 
                Intersect = false, 
                FollowCursor = false,
                X = new TooltipX { Show = true, Format = "dd MMM yyyy HH:mm" },
                Y = new TooltipY { 
                    Formatter = "function(val, opts) { return val.toFixed(1) + ' °C'; }"
                }
            },
            Stroke = new Stroke { Curve = Curve.Smooth, Width = 2 },
            Markers = new Markers { Size = 0 }, // Remove markers for better performance
            DataLabels = new DataLabels { Enabled = false },
            Legend = new Legend { Show = true, Position = LegendPosition.Bottom },
            Grid = new Grid { Show = true }
        };

        _fanChartOptions = new ApexChartOptions<SensorData>
        {
            Theme = new Theme { Mode = theme },
            Chart = new Chart { 
                Zoom = new Zoom { Enabled = true }, 
                Type = ApexCharts.ChartType.Line,
                Animations = new Animations { Enabled = false }
            },
            Xaxis = new XAxis { 
                Type = XAxisType.Datetime,
                Position = XAxisPosition.Bottom,
                Labels = new XAxisLabels { 
                    RotateAlways = false,
                    Rotate = -45,
                    Style = new AxisLabelStyle { FontSize = "12px" },
                    OffsetY = 0 // Ensure labels are below the axis
                },
                AxisBorder = new AxisBorder { Show = true },
                AxisTicks = new AxisTicks { Show = true }
            },
            Yaxis = [new YAxis { Title = new AxisTitle { Text = "RPM" } }],
            Tooltip = new Tooltip { 
                Shared = true, 
                Intersect = false, 
                FollowCursor = false,
                X = new TooltipX { Show = true, Format = "dd MMM yyyy HH:mm" },
                Y = new TooltipY { 
                    Formatter = "function(val, opts) { return val.toFixed(0) + ' RPM'; }"
                }
            },
            Stroke = new Stroke { Curve = Curve.Smooth, Width = 2 },
            Markers = new Markers { Size = 0 },
            DataLabels = new DataLabels { Enabled = false },
            Legend = new Legend { Show = true, Position = LegendPosition.Bottom },
            Grid = new Grid { Show = true }
        };
        
        _powerChartOptions = new ApexChartOptions<SensorData>
        {
            Theme = new Theme { Mode = theme },
            Chart = new Chart { 
                Zoom = new Zoom { Enabled = true }, 
                Type = ApexCharts.ChartType.Area,
                Animations = new Animations { Enabled = false }
            },
            Xaxis = new XAxis { 
                Type = XAxisType.Datetime,
                Position = XAxisPosition.Bottom,
                Labels = new XAxisLabels { 
                    RotateAlways = false,
                    Rotate = -45,
                    Style = new AxisLabelStyle { FontSize = "12px" },
                    OffsetY = 0 // Ensure labels are below the axis
                },
                AxisBorder = new AxisBorder { Show = true },
                AxisTicks = new AxisTicks { Show = true }
            },
            Yaxis = [new YAxis { Title = new AxisTitle { Text = "Watts" } }],
            Tooltip = new Tooltip { 
                Shared = true, 
                Intersect = false, 
                FollowCursor = false,
                X = new TooltipX { Show = true, Format = "dd MMM yyyy HH:mm" },
                Y = new TooltipY { 
                    Formatter = "function(val, opts) { return val.toFixed(1) + ' W'; }"
                }
            },
            Stroke = new Stroke { Curve = Curve.Smooth, Width = 2 },
            Markers = new Markers { Size = 0 },
            DataLabels = new DataLabels { Enabled = false },
            Legend = new Legend { Show = true, Position = LegendPosition.Bottom },
            Grid = new Grid { Show = true },
            Fill = new Fill
            {
                Type = FillType.Gradient,
                Gradient = new FillGradient
                {
                    Shade = theme == Mode.Dark ? GradientShade.Dark : GradientShade.Light,
                    Type = GradientType.Vertical,
                    OpacityFrom = 0.7,
                    OpacityTo = 0.3
                }
            }
        };
    }

    public void Dispose()
    {
        _timer?.Dispose();
        ThemeService.OnThemeChanged -= OnThemeChanged;
        LocalizationService.OnLanguageChanged -= StateHasChanged;
        _chartDataCache.Clear();
    }
}
